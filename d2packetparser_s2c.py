from construct import *
from d2packetparser_c2s import sid, speech_id, char_type


def xy16(pre=""):
    return Embed(Struct(None,
            ULInt16("_".join((pre, "x"))),
            ULInt16("_".join((pre, "y")))
        )
    )

def etype_eid(pre=""):
    return Embed(Struct(None,
            ULInt8("_".join((pre, "entity_type"))),
            sid("_".join((pre, "entity_id")))
        )
    )

map_add_rem = Struct(None,
    xy16(),
    ULInt8("area_id")
)

attr_code = Enum(ULInt8("attr_code"),
    _default_ = "unknown"
)

s2c_packets = Struct(None,
    Anchor("start_fun"),
    Enum(UBInt8("fun"),
        setup = 0x01,
        load_successful = 0x02,
        seed = 0x03,
        enter_game = 0x04,
        move_act = 0x05,
        boot = 0x06,
        map_add = 0x07,
        map_rem = 0x08,
        door_assign = 0x09,
        lost_sight = 0x0a,
        handshake = 0x0b,
        show_dmg = 0x0c,
        action_effect = 0x0d,
        object_state = 0x0e,
        entity_move = 0x0f,
        entity_to_entity = 0x10,
        report_kill = 0x11,
        reassign = 0x15,
        pot = 0x18,
        gold_byte = 0x19,
        exp_byte = 0x1a,
        exp_word = 0x1b,
        exp_dword = 0x1c,
        attr_byte = 0x1d,
        attr_word = 0x1e,
        attr_dword = 0x1f,
        player_attr = 0x20,
        skill_book_count = 0x22,
        skill_select = 0x23,
        chat = 0x26,
        npc_interact = 0x27,
        quest_tree = 0x28,
        sound = 0x2c,
        item_run_out = 0x3f,
        mouse_clear = 0x42,
        d2gs_0x47 = 0x47,
        d2gs_0x48 = 0x48,
        entity_attack_entity = 0x4c,
        entity_attack_location = 0x4d,
        object_assign = 0x51,
        game_refresh = 0x53,
        player_assign = 0x59,
        event_notify = 0x5a,
        player_in_game = 0x5b,
        player_quit_game = 0x5c,
        tele_state = 0x60,
        wp_state = 0x63,
        kill_count = 0x65,
        npc_move = 0x67,
        npc_to_target = 0x68,
        npc_state_assign = 0x69,
        npc_action = 0x6b,
        npc_attack = 0x6c,
        npc_stop = 0x6d,
        about_player = 0x75,
        overhead_clear = 0x76,
        trade = 0x77,
        who_trade = 0x78,
        gold_trade = 0x79,
        summon_log = 0x7a,
        party_update = 0x7f,
        merc_owner = 0x81,
        tele_owner = 0x82,
        quest_event = 0x89,
        entity_request_chat = 0x8a,
        party_invite_status = 0x8b,
        player_relationship = 0x8c,
        party_number = 0x8d,
        corpse_assign = 0x8e,
        pong = 0x8f,
        party_pulse = 0x90,
        skill_log = 0x94,
        resources = 0x95,
        walk_verify = 0x96,
        weapon_switch = 0x97,
        merc_attr_byte = 0x9e,
        merc_attr_word = 0x9f,
        merc_attr_dword = 0xa0,
        merc_attr_add_byte = 0xa1,
        merc_attr_add_word = 0xa2,
        baal_spawn = 0xa4,
        aura_effect = 0xa7,
        aura_add = 0xa8,
        aura_rem = 0xa9,
        entity_info_add = 0xaa,
        entity_heal = 0xab,
        npc_assign = 0xac,
        warden = 0xae,
        compression = 0xaf,
        timeout = 0xb0,
        timeout_full = 0xb4,
        _default_ = "unknown"
    ),
    Embed(Switch(None, lambda ctx: ctx.fun, {
                "setup":Struct(None,
                    Enum(ULInt8("difficulty"),
                        normal = 0x00,
                        nightmare = 0x01,
                        hell = 0x02
                    ),
                    Const(ULInt8(None), 0x04),
                    Enum(ULInt8("diff_core_flag"),
                        hardcore = 0x08,
                        nightmare = 0x10,
                        hell = 0x20
                    ),
                    Enum(ULInt16("ladder_expo_flag"),
                        lod = 0x10,
                        ladder = 0x20
                    ),
                    Enum(ULInt8("expo"),
                        classic = 0x00,
                        lod = 0x01
                    ),
                    Enum(ULInt16("ladder"),
                        no = 0x00,
                        yes = 0x01
                    )
                ),
                "load_successful":Struct(None, Pass),
                "seed":Struct(None,
                    ULInt8("act"),
                    ULInt32("seed_1"),
                    ULInt16("area_id"),
                    ULInt32("seed_2")
                ),
                "enter_game":Struct(None, Pass),
                "move_act":Struct(None, Pass),
                "boot":Struct(None, Pass),
                "map_add":map_add_rem,
                "map_rem":map_add_rem,
                "door_assign":Struct(None,
                    etype_eid(),
                    ULInt8("side"),
                    ULInt16("x"),
                    ULInt16("y")
                ),
                "lost_sight":Struct(None, etype_eid()),
                "handshake":Struct(None, etype_eid()),
                "show_dmg":Struct(None,
                    etype_eid(),
                    ULInt8("effect_state"),
                    ULInt8("sfx"),
                    ULInt8("life_percent")
                ),
                "action_effect":Struct(None,
                    etype_eid(),
                    ULInt8("effect_state"),
                    xy16(),
                    ULInt8("life_percent"),
                    ULInt8("graphic_sound_code")
                ),
                "object_state":Struct(None,
                    etype_eid(),
                    Const(ULInt8(None), 0x03),
                    Flag("changeable"),
                    ULInt32("entity_state")
                ),
                "entity_move":Struct(None,
                    etype_eid(),
                    Enum(ULInt8("movement_type"),
                        knocked_back = 0x20,
                        run = 0x17,
                        walk = 0x01,
                        _default_ = "another"
                    ),
                    xy16("going_to"),
                    ULInt8("knockback"),
                    xy16("going_from")
                ),
                "entity_to_entity":Struct(None,
                    etype_eid(),
                    Enum(ULInt8("movement_type"),
                        run = 0x18,
                        walk = 0x00,
                        _default_ = "another"
                    ),
                    etype_eid("going_to"),
                    xy16()
                ),
                "report_kill":Struct(None,
                    etype_eid(),
                    Enum(ULInt16("killed_by"),
                        player = 0x98,
                        merc = 0x97,
                        _default_ = "another"
                    )
                ),
                "reassign":Struct(None,
                    etype_eid(),
                    xy16(),
                    Flag("reassign")
                ),
                "pot":BitStruct(None,
                    BitField("life", 15),
                    BitField("mana", 15),
                    BitField("stamina", 15),
                    BitField("x", 15),
                    BitField("unknown1", 1),
                    BitField("y", 15),
                    BitField("unknown2", 36),
                ),
                "gold_byte":Struct(None, ULInt8("amount")),
                "exp_byte":Struct(None, ULInt8("amount")),
                "exp_word":Struct(None, ULInt16("amount")),
                "exp_dword":Struct(None, ULInt32("amount")),
                "attr_byte":Struct(None, attr_code, ULInt8("amount")),
                "attr_word":Struct(None, attr_code, ULInt16("amount")),
                "attr_dword":Struct(None, attr_code, ULInt32("amount")),
                "player_attr":Struct(None,
                    ULInt32("player_id"),
                    attr_code,
                    ULInt32("amount")
                ),
                "skill_book_count":Struct(None,
                    ULInt8("entity_type"),
                    ULInt8("unknown1"),
                    ULInt32("entity_id"),
                    ULInt16("skill_code"),
                    ULInt8("stats_amount"),
                    ULInt16("unknown2")
                ),
                "skill_select":Struct(None,
                    etype_eid(),
                    Enum(ULInt8("skill_side"),
                        right = 0x00,
                        left = 0x01
                    ),
                    ULInt16("skill_code"),
                    ULInt32("unknown")
                ),
                "chat":Struct(None,
                    Enum(ULInt16("chat_type"),
                        open_chat = 0x01,
                        recv_whisp = 0x02,
                        system = 0x04,
                        overhead = 0x05,
                        sent_whisp = 0x06,
                    ),
                    etype_eid(),
                    ULInt8("unknown1"),
                    ULInt8("unknown2"),
                    CString("char_name"),
                    CString("message")
                ),
                "npc_interact":Struct(None,
                    etype_eid(),
                    Bytes("unknown", 34)
                ),
                "quest_tree":Struct(None, Bytes("quest info", 102)),
                "sound":Struct(None, etype_eid(), speech_id),
                "item_run_out":Struct(None,
                    Const(ULInt8(None), 0xff),
                    sid("item_entity_id"),
                    Const(ULInt16(None), 0xffff)
                ),
                "mouse_clear":Struct(None, etype_eid()),
                "d2gs_0x47":Struct(None,
                    ULInt16("unknown1"),
                    sid("entity_id"),
                    ULInt32("unknown2")
                ),
                "d2gs_0x48":Struct(None,
                    ULInt16("unknown1"),
                    sid("entity_id"),
                    ULInt32("unknown2")
                ),
                "entity_attack_entity":Struct(None,
                    etype_eid("attacker"),
                    ULInt16("skill"),
                    ULInt8("skill_level"),
                    etype_eid("defender"),
                    Const(ULInt8(None), 0x00)
                ),
                "entity_attack_location":Struct(None,
                    etype_eid(),
                    ULInt16("skill"),
                    Const(ULInt16(None), 0x00),
                    ULInt8("skill_level"),
                    xy16(),
                    Const(ULInt16(None), 0x00)
                ),
                "object_assign":Struct(None,
                    etype_eid(),
                    ULInt16("entity_class_code"),
                    xy16(),
                    Enum(ULInt8("state"),
                        changeable = 0x00,
                        not_changeable = 0x02
                    ),
                    Enum(ULInt8("interaction"),
                        general_chests = 0x00,
                        refreshing_shrine = 0x01,
                        health_shrine = 0x02,
                        chest_will_catch_fire = 0x05,
                        chest_has_a_mommy_inside = 0x08,
                        mana_recharge_shrine = 0x0d,
                        stamina_shrine = 0x0e,
                        exp_shrine = 0x0f,
                        fire_shrine = 0x13,
                        locked_chest = 0x80
                    ),
                ),
                "game_refresh":Struct(None,
                    ULInt32("possible_player_slot"),
                    ULInt8("some_boolean"),
                    ULInt32("some_counter")
                ),
                "player_assign":Struct(None,
                    sid("player_id"),
                    char_type,
                    CString("char_name"),
                    #Padding(lambda ctx: 15 - len(ctx.char_name))
                    Bytes("_unused", lambda ctx: 15 - len(ctx.char_name)),
                    xy16()
                ),
                "event_notify":Struct(None,
                    Enum(ULInt8("event"),
                        dropped_due_timeout = 0x00,
                        dropped_due_errors = 0x01,
                        joined_the_game = 0x02,
                        quit_the_game = 0x03,
                        not_in_the_game = 0x04,
                        not_logged_in_the_game = 0x05,
                        was_slain = 0x06,
                        player_relations = 0x07,
                        busy = 0x08,
                        wait_a_short_time = 0x09,
                        item_in_box = 0x0a,
                        not_listenning_you = 0x0d,
                        not_enough_mana = 0x0e,
                        realm_goind_down = 0x0f,
                        wait_before_host = 0x10,
                        soj_sold = 0x11,
                        diablo_walks = 0x12
                    ),
                    Enum(ULInt8("action"),
                        neutral = 0x00,
                        teaming = 0x02,
                        friendly = 0x04,
                        nasty = 0x08,
                        remove = 0x09,
                        _default_ = "another"
                    ),
                    sid("some_number_or_id"),
                    ULInt8("entity_type"),
                    CString("A"),
                    Bytes("_unused1", lambda ctx: 15 - len(ctx.A)),
                    CString("B"),
                    Bytes("_unused1", lambda ctx: 15 - len(ctx.B)),
                ),
                "player_in_game":Struct(None,
                    ULInt16("pack_len"),
                    sid("player_id"),
                    char_type,
                    CString("char_name"),
                    #Padding(lambda ctx: 15 - len(ctx.char_name))
                    Bytes("_unused", lambda ctx: 15 - len(ctx.char_name)),
                    ULInt16("char_level"),
                    ULInt16("party_number"),
                    Padding(lambda ctx: ctx.pack_len - 28)
                ),
                "player_quit_game":Struct(None, sid("player_sid")),
                "tele_state":Struct(None,
                    Enum(ULInt8("state"),
                        unused_town_area = 0x00,
                        unused_area = 0x03,
                        used_town_area = 0x05,
                        used_area = 0x07
                    ),
                    ULInt8("area_id"),
                    sid("teleport_id")
                ),
                "wp_state":Struct(None,
                    sid("wp_id"),
                    Const(ULInt16(None), 0x0102),
                    Bytes("wp_avaliblity", 14)
                ),
                "kill_count":Struct(None,
                    sid("entity_id"),
                    ULInt16("count")
                ),
                "npc_move":Struct(None,
                    sid("npc_id"),
                    Enum(ULInt8("movement_type"),
                        walk = 0x01,
                        knockback = 0x14,
                        run = 0x17
                    ),
                    xy16(),
                    Const(ULInt16(None), 0x01),
                    ULInt32("flag")
                ),
                "npc_to_target":Struct(None,
                    sid("npc_id"),
                    Enum(ULInt8("movement_type"),
                        walk = 0x01,
                        knockback = 0x14,
                        run = 0x17
                    ),
                    xy16(),
                    etype_eid("target"),
                    Const(ULInt16(None), 0x01),
                    ULInt32("flag")
                ),
                "npc_state_assign":Struct(None,
                    sid("npc_id"),
                    ULInt8("npc_state"),
                    xy16(),
                    ULInt8("life_percent"),
                    ULInt8("unknown")
                ),
                "npc_action":Struct(None,
                    sid("npc_id"),
                    ULInt8("action_type"),
                    Const(ULInt32(None), 0),
                    Const(ULInt32(None), 0),
                    xy16()
                ),
                "npc_attack":Struct(None,
                    sid("npc_id"),
                    ULInt16("skill_code"),
                    etype_eid("defender"),
                    xy16()
                ),
                "npc_stop":Struct(None,
                    sid("npc_id"),
                    xy16(),
                    ULInt8("life_percent")
                ),
                "about_player":Struct(None,
                    sid("player_id"),
                    ULInt16("party_id"),
                    ULInt16("char_level"),
                    ULInt16("relationship_flag"),
                    Flag("in_your_party")
                ),
                "overhead_clear":Struct(None, etype_eid()),
                "trade":Struct(None,
                    Enum(ULInt8("request_id"),
                        player_wants_to_trade = 0x01,
                        player_pressed_accept = 0x05,
                        accept_cant_be_clicked = 0x06,
                        not_enough_space_to_accept = 0x09,
                        player_canceled_trade = 0x0c,
                        you_have_accepted_items = 0x0d,
                        accept_has_been_disabled = 0x0e,
                        accept_has_been_reenabled = 0x0f
                    )
                ),
                "who_trade":Struct(None,
                    CString("char_name"),
                    #Padding(lambda ctx: 15 - len(ctx.char_name))
                    Bytes("_unused", lambda ctx: 15 - len(ctx.char_name)),
                    sid("player_id")
                ),
                "gold_trade":Struct(None,
                    Flag("verifyed"),
                    ULInt32("amount")
                ),
                "summon_log":Struct(None,
                    Enum(ULInt8("action"),
                        remove = 0x00,
                        add = 0x01
                    ),
                    ULInt8("skill_number"),
                    ULInt16("summoned_class"),
                    sid("player_id"),
                    sid("summoned_id")
                ),
                "party_update":Struct(None,
                    ULInt8("entity_type"),
                    ULInt8("life_percent"),
                    sid("entity_id"),
                    ULInt16("area_id")
                ),
                "merc_owner":Struct(None,
                    Const(ULInt16(None), 0x0752),
                    etype_eid(),
                    sid("merc_id"),
                    ULInt32("unknown1"),
                    ULInt32("unknown2")
                ),
                "tele_owner":Struct(None,
                    sid("player_owner_id"),
                    CString("char_name"),
                    #Padding(lambda ctx: 15 - len(ctx.char_name))
                    Bytes("_unused", lambda ctx: 15 - len(ctx.char_name)),
                    sid("tp_id_your_side"),
                    sid("tp_id_other_side")
                ),
                "quest_event":Struct(None, ULInt8("event_id")),
                "entity_request_chat":Struct(None, etype_eid()),
                "party_invite_status":Struct(None,
                    sid("player_id"),
                    ULInt8("relation_status")
                ),
                "player_relationship":Struct(None,
                    sid("player_id_1"),
                    sid("player_id_2"),
                    ULInt16("relationship_flag")
                ),
                "party_number":Struct(None,
                    sid("player_id"),
                    ULInt16("party_number")
                ),
                "corpse_assign":Struct(None,
                    Enum(ULInt8("event"),
                        remove = 0x00,
                        add = 0x01
                    ),
                    sid("player_id"),
                    sid("corpse_id")
                ),
                "pong":Struct(None, Bytes("server_response", 8)),
                "party_pulse":Struct(None,
                    sid("player_id"),
                    ULInt32("mini_map_x"),
                    ULInt32("mini_map_y")
                ),
                "skill_log":Struct(None,
                    ULInt8("count"),
                    sid("player_id"),
                    Array(lambda ctx: ctx.count, Struct("skill",
                            ULInt16("skill_code"),
                            ULInt8("skill_level")
                        )
                    )
                ),
                "resources":BitStruct(None,
                    BitField("life", 15),
                    BitField("mana", 15),
                    BitField("stamina", 15),
                    BitField("x", 15),
                    BitField("unknown1", 1),
                    BitField("y", 15),
                    BitField("unknown2", 20),
                ),
                "walk_verify":BitStruct(None,
                    BitField("stamina", 15),
                    BitField("location_x", 15),
                    BitField("unknown1", 1),
                    BitField("location_y", 15),
                    BitField("unknonw2", 18)
                ),
                "weapon_switch":Struct(None, Pass),
                "merc_attr_byte":Struct(None,
                    ULInt8("attr_code"),
                    sid("merc_id"),
                    ULInt8("amount")
                ),
                "merc_attr_word":Struct(None,
                    ULInt8("attr_code"),
                    sid("merc_id"),
                    ULInt16("amount")
                ),
                "merc_attr_dword":Struct(None,
                    ULInt8("attr_code"),
                    sid("merc_id"),
                    ULInt32("amount")
                ),
                "merc_attr_add_byte":Struct(None,
                    ULInt8("attr_code"),
                    sid("merc_id"),
                    ULInt8("amount")
                ),
                "merc_attr_add_word":Struct(None,
                    ULInt8("attr_code"),
                    sid("merc_id"),
                    ULInt16("amount")
                ),
                "baal_spawn":Struct(None, ULInt16("uniq_code_class")),
                "aura_effect":Struct(None, etype_eid(), ULInt8("aura_effect_code")),
                "aura_add":Struct(None,
                    etype_eid(),
                    ULInt8("length_of_packet"),
                    ULInt8("effect_aura_code"),
                    Bytes("stats_list", lambda ctx: ctx.length_of_packet - 1 - 8)
                ),
                "aura_rem":Struct(None, etype_eid(), ULInt8("aura_effect_code")),
                "entity_info_add":Struct(None,
                    etype_eid(),
                    ULInt8("length_of_packet"),
                    Bytes("stats_list", lambda ctx: ctx.length_of_packet - 1 - 7)
                ),
                "entity_heal":Struct(None, etype_eid(), ULInt8("life_percent")),
                "npc_assign":Struct(None,
                    sid("npc_id"),
                    ULInt16("npc_class_code"),
                    xy16(),
                    ULInt8("life_percent"),
                    ULInt8("length_of_packet"),
                    Bytes("stats_list", lambda ctx: ctx.length_of_packet - 1 - 14)
                ),
                "warden":Struct(None,
                    ULInt8("length_of_packet"),
                    Bytes("stats_list", lambda ctx: ctx.length_of_packet - 1 - 1)
                ),
                "compression":Struct(None, Flag("active")),
                "timeout":Struct(None, Pass),
                "timeout_full":Struct(None, Enum(ULInt32("reason"),
                        bad_char_version = 0x01,
                        bad_char_quest_data = 0x02,
                        bad_char_wp_data = 0x03,
                        bad_char_stats_data = 0x04,
                        bad_char_skill_data = 0x05,
                        unable_to_join = 0x06,
                        bad_char_inventory = 0x07,
                        bad_char_bodies = 0x08,
                        bad_header = 0x09,
                        bad_char_merc = 0x0a,
                        bad_intro = 0x0b,
                        bad_item = 0x0c,
                        bad_char_dead_body_item = 0x0d,
                        generic_bad_file = 0x0e,
                        game_is_full = 0x0f,
                        bad_game_version = 0x10,
                        must_kill_norm_baal = 0x11,
                        must_kill_night_baal = 0x12,
                        soft_cant_to_hard = 0x13,
                        hard_cant_to_soft = 0x14,
                        dead_hard_cant = 0x15,
                        unknown_failure = 0x16,
                        classic_cant_exp = 0x17,
                        exp_cant_classic = 0x18,
                        failed_to_join = 0x19,
                        unable_to_enter_the_game = 0x1a
                    )
                )
            },
            default = Struct(None,
                Pointer(lambda ctx: ctx.start_fun, HexDumpAdapter(GreedyRange(ULInt8("data")))),
                GreedyRange(ULInt8(None))
            )
        )
    )
)

if __name__ == "__main__":
    data = b'''\x01\x02\x04\x20\x20\x00\x00\x01\x00\x02\x03\x03\x79\x10\x6d\
\x44\x67\x00\xd8\x04\xda\x28\x04\x05\x07\xf0\x03\xf0\x03\x67\x0b\x00\x01\x00\
\x00\x00\x0e\x02\x12\x00\x00\x00\x03\x01\x02\x00\x00\x00\x22\x00\xa0\x01\x00\
\x00\x00\xda\x00\x13\x44\x00\x22\x00\xa0\x01\x00\x00\x00\xdc\x00\x14\x44\x00\
\x26\x04\x00\x02\x00\x00\x00\x00\x01\x00\x5b\x73\x79\x73\x5d\x00\x57\x65\x6c\
\x63\x6f\x6d\x65\x20\x74\x6f\x20\x50\x6c\x61\x79\x47\x72\x6f\x75\x6e\x64\x2e\
\x72\x75\x20\x44\x69\x61\x62\x6c\x6f\x20\x49\x49\x20\x73\x65\x72\x76\x65\x72\
\x2e\x00\x26\x05\x00\x00\x03\x00\x00\x00\x1c\xfc\x00\x79\x6f\x62\x61\x00\x26\
\x06\x00\x02\x00\x00\x00\x00\x00\xe5\x70\x6d\x63\x61\x00\x71\x00\x26\x02\x00\
\x02\x00\x00\x00\x00\x00\x02\x70\x6d\x61\x61\x00\x71\x00\x5b\x24\x00\x03\x00\
\x00\x00\x00\x70\x6d\x63\x61\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x94\x08\x03\x00\x00\x00\x00\
\x00\x01\x02\x00\x01\x01\x00\x01\xd9\x00\x01\xda\x00\x01\xdb\x00\x01\xdc\x00\
\x01\x03\x00\x01'''
    s2c = OptionalGreedyRange(s2c_packets)
    print(s2c.parse(data))
